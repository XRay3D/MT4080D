#include "myprotokol.h"
#include <QDebug>
#ifndef A
QByteArray MyProtokol::Parcel(quint8 cmd, quint8* pData, quint8 Len)
{
    enum { LEN = 5 };
    QByteArray data;
    data.push_back(85); //старт 0x55
    data.push_back(-86); //старт 0xAA
    if (pData != nullptr)
        data.push_back(Len + LEN); //размер посылки
    else
        data.push_back(LEN); //размер посылки

    data.push_back(cmd);

    if (pData != nullptr) {
        for (int i = 0; i < Len; ++i)
            data.push_back(*pData++); //данные
    }

    data.push_back(1); //байт для crc
    data[data.size() - 1] = CalcCrc(data); //crc
    //qDebug() << "Parcel" << uint(m_data[3]) << m_data.toHex().toUpper();
    return data;
}

QByteArray MyProtokol::Parcel(quint8 cmd, const QByteArray& data)
{
    return Parcel(cmd, (quint8*)data.data(), (quint8)data.size());
}

QByteArray MyProtokol::Parcel(quint8 cmd)
{
    return Parcel(cmd, nullptr, 0);
}

#else
QByteArray MyProtokol::Parcel(quint8 cmd, quint8* pData, quint8 Len, quint8 cannel)
{
    enum { LEN = 6 };
    QByteArray data;
    data.push_back(85); //старт 0x55
    data.push_back(-86); //старт 0xAA
    if (pData != nullptr)
        data.push_back(Len + LEN); //размер посылки
    else
        data.push_back(LEN); //размер посылки

    data.push_back(cannel);
    data.push_back(cmd);

    if (pData != nullptr) {
        for (int i = 0; i < Len; ++i)
            data.push_back(*pData++); //данные
    }

    data.push_back(1); //байт для crc
    data[data.size() - 1] = CalcCrc(data); //crc
    //qDebug() << "Parcel" << uint(m_data[3]) << m_data.toHex().toUpper();
    return data;
}

QByteArray MyProtokol::Parcel(quint8 cmd, const QByteArray& data, quint8 cannel)
{
    return Parcel(cmd, (quint8*)data.data(), (quint8)data.size(), cannel);
}

QByteArray MyProtokol::Parcel(quint8 cmd, quint8 cannel)
{
    return Parcel(cmd, nullptr, 0, cannel);
}
#endif

bool MyProtokol::CheckData(const QByteArray& data)
{
    if (data.size() > 4)
        if (data.at(0) == -86 && data.at(1) == 85)
            if (quint8(data[2]) == data.size())
                if (quint8(data[data.size() - 1]) == CalcCrc(data))
                    return true;

    return false;
}
quint8 MyProtokol::CalcCrc(const QByteArray& data)
{
    quint8 crc8 = 0;
    quint8 len = data.size() - 1;
    for (uint16_t i = 0; i < len; ++i) {
        crc8 ^= data[i];
        for (uint16_t j = 0; j < 8; ++j)
            crc8 = (crc8 & 0x80) ? ((crc8 << 1) ^ POLYNOMIAL) : (crc8 << 1);
    }
    return crc8;
}
